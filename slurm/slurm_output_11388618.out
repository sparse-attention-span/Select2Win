2025-04-25 18:15:23.408814: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-04-25 18:15:23.426149: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:467] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1745597723.446407 2512031 cuda_dnn.cc:8579] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
E0000 00:00:1745597723.452674 2512031 cuda_blas.cc:1407] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
W0000 00:00:1745597723.469284 2512031 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
W0000 00:00:1745597723.469319 2512031 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
W0000 00:00:1745597723.469325 2512031 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
W0000 00:00:1745597723.469330 2512031 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
2025-04-25 18:15:23.474506: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: fragmential (fragmential-university-of-amsterdam) to https://api.wandb.ai. Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.19.9
wandb: Run data is saved locally in /gpfs/home5/scur2588/team_git/erwin/experiments/wandb/run-20250425_181526-j5evxjwx
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run erwin_shapenet
wandb: ‚≠êÔ∏è View project at https://wandb.ai/fragmential-university-of-amsterdam/ballformer
wandb: üöÄ View run at https://wandb.ai/fragmential-university-of-amsterdam/ballformer/runs/j5evxjwx
using LucidRains

    encoder 0
Erwin transformer blocks:
0 1 2 3 4 5 
    bottleneck
Erwin transformer blocks:
0 1 2 3 4 5 
    decoder 0
Erwin transformer blocks:
0 1 2 3 4 5 Traceback (most recent call last):
  File "/gpfs/home5/scur2588/team_git/erwin/experiments/train_shapenet.py", line 146, in <module>
    fit(config, model, optimizer, scheduler, train_loader, valid_loader, test_loader, 110, 160)
  File "/gpfs/home5/scur2588/team_git/erwin/experiments/../../erwin/training.py", line 127, in fit
    stat_dict = train_step(model, batch, optimizer, scheduler)
  File "/gpfs/home5/scur2588/team_git/erwin/experiments/../../erwin/training.py", line 60, in train_step
    stat_dict["train/loss"].backward()
  File "/gpfs/home5/scur2588/team_git/erwin/erwin/lib64/python3.9/site-packages/torch/_tensor.py", line 581, in backward
    torch.autograd.backward(
  File "/gpfs/home5/scur2588/team_git/erwin/erwin/lib64/python3.9/site-packages/torch/autograd/__init__.py", line 347, in backward
    _engine_run_backward(
  File "/gpfs/home5/scur2588/team_git/erwin/erwin/lib64/python3.9/site-packages/torch/autograd/graph.py", line 825, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 16.00 GiB. GPU 0 has a total capacity of 39.50 GiB of which 14.76 GiB is free. Including non-PyTorch memory, this process has 24.73 GiB memory in use. Of the allocated memory 23.87 GiB is allocated by PyTorch, and 367.11 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[1;34mwandb[0m: 
[1;34mwandb[0m: üöÄ View run [33merwin_shapenet[0m at: [34mhttps://wandb.ai/fragmential-university-of-amsterdam/ballformer/runs/j5evxjwx[0m
[1;34mwandb[0m: Find logs at: [1;35mwandb/run-20250425_181526-j5evxjwx/logs[0m

JOB STATISTICS
==============
Job ID: 11388618
Cluster: snellius
User/Group: scur2588/scur2588
State: RUNNING
Nodes: 1
Cores per node: 18
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 00:07:12 core-walltime
Job Wall-clock time: 00:00:24
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 120.00 GB (120.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
