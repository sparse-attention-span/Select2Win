2025-04-25 12:00:57.684062: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2025-04-25 12:00:57.816871: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:467] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered
WARNING: All log messages before absl::InitializeLog() is called are written to STDERR
E0000 00:00:1745575257.864323 3967992 cuda_dnn.cc:8579] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered
E0000 00:00:1745575257.881769 3967992 cuda_blas.cc:1407] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered
W0000 00:00:1745575257.965350 3967992 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
W0000 00:00:1745575257.965391 3967992 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
W0000 00:00:1745575257.965397 3967992 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
W0000 00:00:1745575257.965402 3967992 computation_placer.cc:177] computation placer already registered. Please check linkage and avoid linking the same target more than once.
2025-04-25 12:00:57.972813: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 AVX512F AVX512_VNNI FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
wandb: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.
wandb: Currently logged in as: fragmential (fragmential-university-of-amsterdam) to https://api.wandb.ai. Use `wandb login --relogin` to force relogin
wandb: Tracking run with wandb version 0.19.9
wandb: Run data is saved locally in /gpfs/home5/scur2588/team_git/erwin/experiments/wandb/run-20250425_120106-jde7yfcx
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run erwin_shapenet
wandb: ‚≠êÔ∏è View project at https://wandb.ai/fragmential-university-of-amsterdam/ballformer
wandb: üöÄ View run at https://wandb.ai/fragmential-university-of-amsterdam/ballformer/runs/jde7yfcx
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
passed forward once
passing forward once
Traceback (most recent call last):
  File "/gpfs/home5/scur2588/team_git/erwin/experiments/train_shapenet.py", line 146, in <module>
    fit(config, model, optimizer, scheduler, train_loader, valid_loader, test_loader, 110, 160)
  File "/gpfs/home5/scur2588/team_git/erwin/experiments/../../erwin/training.py", line 127, in fit
    stat_dict = train_step(model, batch, optimizer, scheduler)
  File "/gpfs/home5/scur2588/team_git/erwin/experiments/../../erwin/training.py", line 59, in train_step
    stat_dict = model.training_step(batch)
  File "/gpfs/home5/scur2588/team_git/erwin/experiments/../../erwin/experiments/wrappers/shapenet.py", line 46, in training_step
    return self.step(batch, "train")
  File "/gpfs/home5/scur2588/team_git/erwin/experiments/../../erwin/experiments/wrappers/shapenet.py", line 40, in step
    pred = self(**batch).squeeze(-1)
  File "/gpfs/home5/scur2588/team_git/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/home5/scur2588/team_git/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/home5/scur2588/team_git/erwin/experiments/../../erwin/experiments/wrappers/shapenet.py", line 31, in forward
    return self.pred_head(self.main_model(node_features, node_positions, **kwargs))
  File "/gpfs/home5/scur2588/team_git/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/home5/scur2588/team_git/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/home5/scur2588/team_git/erwin/experiments/../../erwin/models/erwin.py", line 491, in forward
    node = layer(node)
  File "/gpfs/home5/scur2588/team_git/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/home5/scur2588/team_git/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/home5/scur2588/team_git/erwin/experiments/../../erwin/models/erwin.py", line 346, in forward
    node.x = blk(node.x[node.tree_idx_rot], node.pos[node.tree_idx_rot])[tree_idx_rot_inv]
  File "/gpfs/home5/scur2588/team_git/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/home5/scur2588/team_git/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/home5/scur2588/team_git/erwin/experiments/../../erwin/models/erwin.py", line 306, in forward
    x = x + self.BMSA(self.norm1(x), pos)
  File "/gpfs/home5/scur2588/team_git/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/gpfs/home5/scur2588/team_git/erwin/erwin/lib64/python3.9/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/gpfs/home5/scur2588/team_git/erwin/experiments/../../erwin/models/erwin.py", line 249, in forward
    dk, dv = self.select_balls(q, k, v, topk)
  File "/gpfs/home5/scur2588/team_git/erwin/experiments/../../erwin/models/erwin.py", line 236, in select_balls
    desired_keys = torch.gather(keys, dim=2, index=topk_indices)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 1024.00 MiB. GPU 0 has a total capacity of 39.50 GiB of which 564.12 MiB is free. Including non-PyTorch memory, this process has 38.94 GiB memory in use. Of the allocated memory 38.32 GiB is allocated by PyTorch, and 134.60 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
[1;34mwandb[0m: 
[1;34mwandb[0m: üöÄ View run [33merwin_shapenet[0m at: [34mhttps://wandb.ai/fragmential-university-of-amsterdam/ballformer/runs/jde7yfcx[0m
[1;34mwandb[0m: Find logs at: [1;35mwandb/run-20250425_120106-jde7yfcx/logs[0m

JOB STATISTICS
==============
Job ID: 11379221
Cluster: snellius
User/Group: scur2588/scur2588
State: RUNNING
Nodes: 1
Cores per node: 18
CPU Utilized: 00:00:00
CPU Efficiency: 0.00% of 00:09:54 core-walltime
Job Wall-clock time: 00:00:33
Memory Utilized: 0.00 MB
Memory Efficiency: 0.00% of 120.00 GB (120.00 GB/node)
WARNING: Efficiency statistics can only be obtained after the job has ended as seff tool is based on the accounting database data.
